==== GETTING REPOSITORY ====

You typically obtain a Git repository in one of two ways:
- You can take a local directory that is currently not under version control, and turn it into a Git repository with "git init" command.
- You can clone an existing Git repository from elsewhere with "git clone [repo url]".

In either case, you end up with a Git repository on your local machine, ready for work.
This creates a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton.

==== GIT IGNORE ====

You can create a file listing patterns to match them named .gitignore in the root folder for ignore the files that you dont want to control.

==== BASIC ====

git init: init a local repository
git add . or [filename]: track all files or a specific file
git commit -m "message": commit changes with message (always required)
git log: displays all of the commits in a repository's history
git reset: move the repository back to a previous commit , discarding any changes made after that commit

git tag: show all tags
git tag -n: show all tags with its description
git tag -l "[tag name]": search tag by name
git tag -a v[version] -m "message": create annotated tags. Example: git tag -a v1.0.0 -m "first version"
git tag v[version]: create a lightweight tag. Example: git tag -a v1.0.0 
git push origin [tag name]: push tag to remote repository and pointing to the last pushed commit
git tag -d [tagname]: deletes tag

git branch: check all branches
git branch [name]: create new branch
git checkout [branchname]: switch to another branch
git diff: to compare commits, branches, files, etc

==== REMOTE COMMANDS ====

git clone [repo url]: clone a remote repository
git fetch: git fetch fetches differences from the current branch, but doesn't change anything on that branch 
git pull: pulls down all the data from that remote project that you don’t have yet
git push origin: push all local data for remote repository
git remote: is used to refer to a remote repository, but do not pull anything - its just a pointer for future actions

==== GIT BRANCHES ====

-> Branch Master
The default branch name in Git is master. 
As you start making commits, you’re given a master branch that points to the last commit you made. 
Every time you commit, the master branch pointer moves forward automatically.

-> Pointer HEAD
The main pointer is called HEAD. So, for default, the HEAD is always "Master".

-> New Branch
What happens when you create a new branch? Well, doing so creates a new pointer for you to move around.
Let’s say you want to create a new branch called "gigachad". You do this with the git branch command: git branch gigachad
With this, now, exists two branchs, and the HEAD can point to "Master" or "gigachad"

-> Switch Branch
To switch to an existing branch, you run the git checkout command: git checkout gigachad

Two branches are like two different and isolated dimensions of the same repository.
If one is different from other, the files that appears in the local folder will be different too.

-> Merge branchs
To, for example, merge the branch Master with "gigachad", type, from Master: git merge gigachad

-> Rebasing
In Git, there are two main ways to integrate changes from one branch into another: the merge and the rebase.
With the rebase command, you can take all the changes that were committed on one branch and replay them on a different branch.






