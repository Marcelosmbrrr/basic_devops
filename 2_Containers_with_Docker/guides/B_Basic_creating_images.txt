==== IMAGES BASIC COMMANDS ====

docker pull [image]: downloads the ready image from dockerhub
docker push [image_name]: push an image to a personal dockerhub repository (it must have the same name as the repository (see docker -t))
docker build.: mounts an image created from a Dockerfile
docker -t [image_id] [name]: sets a name for the already mounted image
docker -t [image_id] [name]:[tag]: defines a tag for the already mounted image (versioning) and optionally a new name
docker build -t [name]:[tag] .: builds an image from a Dockerfile and with a custom name and tag
docker image ls: shows available images
docker rmi [image_id]: delete the image
docker image inspect: inspect the image

==== CREATING IMAGES WITH DOCKERFILE ====

Fonte: https://blog.rocketseat.com.br/dockerfile-principais-comandos-para-criar-a-receita-da-imagem/#:~:text=Para%20criar%20um%20Dockerfile%20%C3%A9,docker%20build%20%2Dt%20nome_da_imagem%20.

The Dockerfile is nothing more than a means we use to create our own images.
In other words, it serves as the recipe for building a container, allowing you to define a custom environment.

To create a Dockerfile is simple, just create a file with the name Dockerfile.

Dockerfile commands:

FROM: Mandatory instruction that indicates which image will be used as a starting point.
RUN: It serves to execute commands in the image mounting process. There may be more than one. Ex: RUN npm install package
CMD: It serves to execute commands in the container assembly process. There can only be one. Ex: RUN php artisan serve
EXPOSE: Instruction that informs which port should be released for the container.
COPY and ADD: Commands to copy files and folders from a specific place on the local machine to a folder in the container.
VOLUME: Creation of a volume. Ex: VOLUME /example
WORKDIR: Defines a folder inside the container where the commands will be executed.
USER: We can change the host users to run the commands.
LABEL maintainer: to inform the creator of the image
ENTRYPOINT ["path to file"]: defines the application entry point

==== HOW PUSH IMAGES TO DOCKERHUB ====

First you need to create a repository in dockerhub: https://hub.docker.com/repositories
After, login into dockerhub via terminal: docker login
After, create and build an image with the same repository name: docker build -t username/repsitory_name
Lastly, just do a push: docker push username/repository_name

How to push the "same" image but modified?
You need to rebuild the image with the same name and another tag (version): docker build -t username/repository_name:new_tag_name